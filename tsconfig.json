{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Projects */

    /* Language and Environment */
    "target": "ES5" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
    "lib": [
      "ES2016",
      "ES2017",
      "DOM",
      "WebWorker"
    ] /* Specify a set of bundled library declaration files that describe the target runtime environment. */,
    "types": ["jest"],

    /* Modules */
    "module": "esnext" /* Specify what module code is generated. */,
    "rootDir": "." /* Specify the root folder within your source files. */,
    "moduleResolution": "node" /* Specify how TypeScript looks up a file from a given module specifier. */,
    "baseUrl": "src" /* Specify the base directory to resolve non-relative module names. */,
    "paths": {
      "src/*": ["src/*"]
    } /* Specify a set of entries that re-map imports to additional lookup locations. */,

    /* JavaScript Support */

    /* Emit */
    "noEmit": true,
    "declaration": true /* Generate .d.ts files from TypeScript and JavaScript files in your project. */,
    // "declarationMap": true /* Create sourcemaps for d.ts files. */,
    // "outDir": "./build" /* Specify an output folder for all emitted files. */,
    "removeComments": true /* Disable emitting comments. */,

    /* Interop Constraints */
    // "isolatedModules": true /* Ensure that each file can be safely transpiled without relying on other imports. */,
    "allowSyntheticDefaultImports": true /* Allow 'import x from y' when a module doesn't have a default export. */,
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */,
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

    /* Type Checking */
    "strict": true /* Enable all strict type-checking options. */,
    "noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied `any` type.. */,
    "strictNullChecks": true /* When type checking, take into account `null` and `undefined`. */,
    "strictFunctionTypes": true /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */,
    "strictBindCallApply": true /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */,
    "strictPropertyInitialization": true /* Check for class properties that are declared but not set in the constructor. */,
    "noImplicitThis": true /* Enable error reporting when `this` is given the type `any`. */,

    /* Completeness */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  },
  "include": ["src/**/*", "src/@types/*"],
  "exclude": ["node_modules", "build", "**/__test__", "**/*.test.ts"]
}
